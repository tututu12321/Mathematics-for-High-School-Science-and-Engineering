import numpy as np
import matplotlib.pyplot as plt

# 定数の設定
h = 6.626e-34  # プランク定数 (J·s)
hbar = h / (2 * np.pi)  # ディラック定数 (J·s)
me = 9.109e-31  # 電子質量 (kg)
L = 1e-9  # ポテンシャル井戸の幅 (m)
n_max = 5  # 最大量子数
x = np.linspace(0, L, 500)  # 位置範囲 (0 ~ L)

# 波数 k の計算
def wave_number(n):
    return n * np.pi / L

# 波動関数の計算
def wave_function(n, x):
    return np.sqrt(2 / L) * np.sin(wave_number(n) * x)

# エネルギー固有値の計算
def energy(n):
    return (n**2 * h**2) / (8 * me * L**2)

# エネルギー差 ΔE
def energy_difference(n):
    return (2 * n + 1) * h**2 / (8 * me * L**2)

# プロット: 波動関数
plt.figure(figsize=(10, 6))
for n in range(1, n_max + 1):
    psi = wave_function(n, x)
    plt.plot(x, psi + n - 1, label=f'n={n}')  # 波動関数をプロット (高さをずらす)

plt.title('Wave Functions in a 1D Potential Well')
plt.xlabel('Position x (m)')
plt.ylabel('Wave Function ψ(x)')
plt.axhline(0, color='black', linewidth=0.5, linestyle='--')
plt.legend()
plt.grid()
plt.show()

# エネルギー固有値とエネルギー差
energies = [energy(n) for n in range(1, n_max + 1)]
energy_differences = [energy_difference(n) for n in range(1, n_max)]

# プロット: エネルギー固有値
plt.figure(figsize=(10, 6))
plt.bar(range(1, n_max + 1), energies, color='skyblue', label='Energy Levels')
plt.title('Energy Levels')
plt.xlabel('Quantum Number n')
plt.ylabel('Energy (J)')
plt.grid()
plt.legend()
plt.show()

# プロット: エネルギー差 ΔE
plt.figure(figsize=(10, 6))
plt.plot(range(1, n_max), energy_differences, 'o-', label='Energy Difference ΔE')
plt.title('Energy Difference ΔE')
plt.xlabel('Quantum Number n')
plt.ylabel('ΔE (J)')
plt.grid()
plt.legend()
plt.show()
