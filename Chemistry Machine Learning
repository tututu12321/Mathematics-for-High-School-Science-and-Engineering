import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error, accuracy_score

# -------------------------
# 1. Reaction Rate Prediction (Regression)
# -------------------------
reaction_data = {
    "Temperature": [25, 30, 35, 40, 45, 50],  # °C
    "Concentration": [1, 0.8, 0.6, 0.5, 0.4, 0.3],  # mol/L
    "ReactionRate": [10, 14, 20, 25, 32, 40]  # Rate in arbitrary units
}

df_reaction = pd.DataFrame(reaction_data)
X_reaction = df_reaction[["Temperature", "Concentration"]]
y_reaction = df_reaction["ReactionRate"]

X_train_reaction, X_test_reaction, y_train_reaction, y_test_reaction = train_test_split(X_reaction, y_reaction, test_size=0.3, random_state=42)

reaction_regressor = LinearRegression()
reaction_regressor.fit(X_train_reaction, y_train_reaction)
y_pred_reaction = reaction_regressor.predict(X_test_reaction)
reaction_mse = mean_squared_error(y_test_reaction, y_pred_reaction)

# Plot reaction rate prediction
plt.figure(figsize=(8, 5))
plt.scatter(range(len(y_test_reaction)), y_test_reaction, label="Actual", color="blue")
plt.scatter(range(len(y_pred_reaction)), y_pred_reaction, label="Predicted", color="red")
plt.title("Reaction Rate Prediction")
plt.xlabel("Sample")
plt.ylabel("Reaction Rate")
plt.legend()
plt.show()
print(f"Reaction Rate Prediction MSE: {reaction_mse:.2f}")

# -------------------------
# 2. Organic Compound Classification
# -------------------------
compound_data = {
    "MolecularWeight": [18, 58.44, 342.3, 78.11, 92.14, 180.16],
    "BoilingPoint": [100, 1465, 285, 80, 77, 155],  # °C
    "IsOrganic": [0, 0, 1, 1, 1, 1]  # 1=Organic, 0=Inorganic
}

df_compound = pd.DataFrame(compound_data)
X_compound = df_compound[["MolecularWeight", "BoilingPoint"]]
y_compound = df_compound["IsOrganic"]

X_train_compound, X_test_compound, y_train_compound, y_test_compound = train_test_split(X_compound, y_compound, test_size=0.3, random_state=42)

compound_classifier = RandomForestClassifier(random_state=42)
compound_classifier.fit(X_train_compound, y_train_compound)
y_pred_compound = compound_classifier.predict(X_test_compound)
classification_accuracy = accuracy_score(y_test_compound, y_pred_compound)

# Plot compound classification
plt.figure(figsize=(8, 5))
plt.bar(["Correct", "Incorrect"], [classification_accuracy, 1 - classification_accuracy], color=["green", "red"])
plt.title("Compound Classification Accuracy")
plt.ylabel("Accuracy")
plt.show()
print(f"Compound Classification Accuracy: {classification_accuracy:.2f}")

# -------------------------
# 3. Reaction Heat Prediction (Regression)
# -------------------------
heat_data = {
    "Temperature": [25, 50, 75, 100],  # °C
    "ReactantConcentration": [1.0, 0.8, 0.6, 0.4],  # mol/L
    "ReactionHeat": [10, 20, 30, 40]  # kJ
}

df_heat = pd.DataFrame(heat_data)
X_heat = df_heat[["Temperature", "ReactantConcentration"]]
y_heat = df_heat["ReactionHeat"]

X_train_heat, X_test_heat, y_train_heat, y_test_heat = train_test_split(X_heat, y_heat, test_size=0.3, random_state=42)

heat_regressor = LinearRegression()
heat_regressor.fit(X_train_heat, y_train_heat)
y_pred_heat = heat_regressor.predict(X_test_heat)
heat_mse = mean_squared_error(y_test_heat, y_pred_heat)

# Plot reaction heat prediction
plt.figure(figsize=(8, 5))
plt.plot(range(len(y_test_heat)), y_test_heat, label="Actual", marker="o")
plt.plot(range(len(y_pred_heat)), y_pred_heat, label="Predicted", marker="x")
plt.title("Reaction Heat Prediction")
plt.xlabel("Sample")
plt.ylabel("Reaction Heat (kJ)")
plt.legend()
plt.show()
print(f"Reaction Heat Prediction MSE: {heat_mse:.2f}")

# -------------------------
# 4. pH Color Prediction
# -------------------------
ph_color_data = {
    "pH": [1, 3, 5, 7, 9, 11, 13],
    "ColorRed": [255, 200, 150, 100, 50, 25, 0],
    "ColorGreen": [0, 50, 100, 150, 200, 225, 255],
    "ColorBlue": [0, 0, 0, 50, 100, 200, 255]
}

df_ph_color = pd.DataFrame(ph_color_data)
X_ph_color = df_ph_color[["pH"]]
y_ph_color = df_ph_color[["ColorRed", "ColorGreen", "ColorBlue"]]

ph_color_regressor = KNeighborsRegressor(n_neighbors=3)
ph_color_regressor.fit(X_ph_color, y_ph_color)

# Predict and plot pH color
new_ph = pd.DataFrame([[4], [10]], columns=["pH"])
predicted_colors = ph_color_regressor.predict(new_ph)

# Visualization for pH color prediction
plt.figure(figsize=(8, 5))
for i, (pH, color) in enumerate(zip(new_ph["pH"], predicted_colors)):
    plt.bar(i, 1, color=[c / 255 for c in color], label=f"pH: {pH}")
plt.title("Predicted pH Colors")
plt.xticks(range(len(new_ph)), labels=new_ph["pH"])
plt.xlabel("pH")
plt.ylabel("Color Intensity")
plt.legend()
plt.show()

for pH_value, color in zip(new_ph["pH"], predicted_colors):
    print(f"pH: {pH_value}, Predicted Color (R, G, B): {color.astype(int)}")
