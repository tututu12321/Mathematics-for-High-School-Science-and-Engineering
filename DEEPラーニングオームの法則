import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
import matplotlib.pyplot as plt

# PyTorchモデル定義
class ImprovedLinearModel(nn.Module):
    def __init__(self):
        super(ImprovedLinearModel, self).__init__()
        self.fc1 = nn.Linear(1, 50)
        self.fc2 = nn.Linear(50, 50)
        self.fc3 = nn.Linear(50, 1)
        self.dropout = nn.Dropout(p=0.2)

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = self.dropout(x)
        x = torch.relu(self.fc2(x))
        x = self.fc3(x)
        return x

# PyTorchモデル、損失関数、最適化の設定
model = ImprovedLinearModel()
criterion = nn.MSELoss()
optimizer = optim.AdamW(model.parameters(), lr=0.001)

# データ準備
I_train = torch.tensor([[0.1], [0.2], [0.3], [0.4], [0.5], [0.6], [0.7], [0.8], [0.9], [1.0]])
V_train = torch.tensor([[1.5], [2.8], [3.0], [4.2], [5.0], [6.0], [7.1], [8.0], [8.9], [10.1]])

# 学習ループ
loss_history = []
num_epochs = 2000
for epoch in range(num_epochs):
    model.train()
    V_pred = model(I_train)
    loss = criterion(V_pred, V_train)
    loss_history.append(loss.item())

    optimizer.zero_grad()
    loss.backward()
    optimizer.step()

    if (epoch + 1) % 100 == 0:
        print(f"Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.6f}")

# NumPyによる通常の最小二乗法
I_np = I_train.numpy()
V_np = V_train.numpy()
X = np.c_[np.ones(I_np.shape), I_np]  # 切片用の1を追加
theta_best = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(V_np)  # 最小二乗法
V_pred_np_ls = X.dot(theta_best)  # 最小二乗法の予測値

# 訓練データと予測値をプロット
I_train_np = I_train.numpy()
V_train_np = V_train.numpy()
V_pred_np = model(I_train).detach().numpy()

plt.figure(figsize=(16, 8))

# 訓練データと予測のプロット（PyTorchモデル）
plt.subplot(1, 3, 1)
plt.scatter(I_train_np, V_train_np, label="Training Data", color="blue", marker='o')
plt.plot(I_train_np, V_pred_np, label="PyTorch Model Prediction", color="red", linestyle='-')
plt.xlabel("Current (I) [Amps]")
plt.ylabel("Voltage (V) [Volts]")
plt.title("PyTorch Linear Regression")
plt.legend()
plt.grid()

# 訓練データと予測のプロット（最小二乗法）
plt.subplot(1, 3, 2)
plt.scatter(I_train_np, V_train_np, label="Training Data", color="blue", marker='o')
plt.plot(I_np, V_pred_np_ls, label="Least Squares Prediction", color="orange", linestyle='-')
plt.xlabel("Current (I) [Amps]")
plt.ylabel("Voltage (V) [Volts]")
plt.title("Least Squares Linear Regression")
plt.legend()
plt.grid()

# 学習損失のプロット
plt.subplot(1, 3, 3)
plt.plot(range(num_epochs), loss_history, label="Loss (PyTorch)", color="green")
plt.xlabel("Epochs")
plt.ylabel("Loss")
plt.title("PyTorch Training Loss Over Epochs")
plt.legend()
plt.grid()

plt.tight_layout()
plt.show()

# 結果の表示
print("=== PyTorch Model Parameters ===")
for name, param in model.named_parameters():
    print(f"{name}: {param.data.numpy()}")
    
print("\n=== Least Squares Model Parameters ===")
print(f"Intercept: {theta_best[0][0]:.4f}, Slope: {theta_best[1][0]:.4f}")
