import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as stats

# シード値の設定（再現性のため）
np.random.seed(42)

# サンプルデータ: 電流 (I) [Amps] と 電圧 (V) [Volts] （雑音なし）
I = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])  # 電流 [A]
R_true = 10  # 真の抵抗値 (スロープ)
V_ideal = R_true * I  # オームの法則に基づく理想的な電圧

# 電圧データにノイズを追加
noise_std = 0.5  # ノイズの標準偏差
V_noisy = V_ideal + np.random.normal(0, noise_std, size=I.shape)  # ノイズ付き電圧

# 線形回帰（最小二乗法）をnumpyで実行
# 切片項を追加するためにIに1の列を追加
I_b = np.c_[np.ones((I.shape[0], 1)), I]

# 最適なR（スロープ）とb（切片）を計算
theta_best = np.linalg.inv(I_b.T.dot(I_b)).dot(I_b.T).dot(V_noisy)

# 学習したモデルを用いて予測
V_pred = I_b.dot(theta_best)

# 残差の計算
residuals = V_noisy - V_pred

# 平均値の計算
mean_I = np.mean(I)
mean_V = np.mean(V_noisy)

# 分散の計算
variance_I = np.var(I, ddof=1)  # サンプル分散
variance_V = np.var(V_noisy, ddof=1)

# 平均二乗誤差 (MSE) の計算
mse = np.mean(residuals**2)

# 決定係数 (R^2) の計算
ss_total = np.sum((V_noisy - mean_V)**2)
ss_residual = np.sum(residuals**2)
r_squared = 1 - (ss_residual / ss_total)

# スロープ（R）の標準誤差の計算
se_R = np.sqrt(mse / np.sum((I - mean_I)**2))

# 相関係数の計算
cov_I_V = np.sum((I - mean_I) * (V_noisy - mean_V)) / (len(I) - 1)
std_I = np.std(I, ddof=1)
std_V = np.std(V_noisy, ddof=1)
correlation = cov_I_V / (std_I * std_V)

# レバレッジの計算
H = I_b.dot(np.linalg.inv(I_b.T.dot(I_b))).dot(I_b.T)  # ハット行列
leverage = np.diag(H)

# クックの距離の計算
cooks_distance = (residuals**2 / (mse * 2)) * (leverage / (1 - leverage)**2)

# プロットの設定
plt.figure(figsize=(12, 10))

# プロット1: 実測値 vs 予測値（フィッティングライン）
plt.subplot(2, 2, 1)
plt.scatter(I, V_noisy, color='blue', label='Noisy data')
plt.plot(I, V_pred, color='red', label='Fitted line')
plt.xlabel('Current (Amps)')
plt.ylabel('Voltage (Volts)')
plt.title('Ohm\'s Law Linear Regression with Noise')
plt.legend()
plt.grid()

# プロット2: 残差プロット（残差 vs 予測値）
plt.subplot(2, 2, 2)
plt.scatter(V_pred, residuals, color='green')
plt.axhline(y=0, color='black', linestyle='--', linewidth=0.5)
plt.xlabel('Fitted Values (Volts)')
plt.ylabel('Residuals (Volts)')
plt.title('Residual Plot')
plt.grid()

# プロット3: 残差のヒストグラム（正規性のチェック）
plt.subplot(2, 2, 3)
sns.histplot(residuals, kde=True, color='purple')
plt.xlabel('Residuals (Volts)')
plt.title('Histogram of Residuals')
plt.grid()

# プロット4: 残差のQ-Qプロット（正規性のチェック）
plt.subplot(2, 2, 4)
stats.probplot(residuals, dist="norm", plot=plt)
plt.title('Q-Q Plot of Residuals')
plt.grid()

plt.tight_layout()
plt.show()

# 学習したパラメータの表示
R_estimated = theta_best[1]
intercept = theta_best[0]

# アウトライヤー検出: 大きな残差を持つ点の識別
outliers = np.where(np.abs(residuals) > 2 * np.std(residuals))[0]  # 残差の2標準偏差を閾値に
outliers_I = I[outliers]
outliers_V = V_noisy[outliers]

# 分析結果の表示
print(f"Estimated Resistance (R): {R_estimated:.4f} Ohms")
print(f"Intercept (b): {intercept:.4f} Volts")
print(f"Mean of Current (I): {mean_I:.4f} A")
print(f"Mean of Noisy Voltage (V): {mean_V:.4f} V")
print(f"Variance of Current (I): {variance_I:.4f} A²")
print(f"Variance of Noisy Voltage (V): {variance_V:.4f} V²")
print(f"Mean Squared Error (MSE): {mse:.4f} V²")
print(f"R-squared: {r_squared:.4f}")
print(f"Standard Error of Resistance (SE_R): {se_R:.4f} Ohms")
print(f"Correlation Coefficient: {correlation:.4f}")

# アウトライヤーの表示
if len(outliers) > 0:
    print(f"\nOutliers detected at indices: {outliers}")
    print(f"Outlier Current Values (I): {outliers_I}")
    print(f"Outlier Voltage Values (V): {outliers_V}")
else:
    print("\nNo outliers detected.")

# クックの距離分析: クックの距離が高い点の検出
high_cooks_distance = np.where(cooks_distance > 4 / len(I))[0]  # クックの距離の閾値: 4/n
print(f"\nData points with high Cook's distance: {high_cooks_distance}")

# レバレッジ分析: 高いレバレッジを持つ点の検出（閾値: 2*平均レバレッジ）
high_leverage = np.where(leverage > 2 * np.mean(leverage))[0]
print(f"Data points with high leverage: {high_leverage}")
