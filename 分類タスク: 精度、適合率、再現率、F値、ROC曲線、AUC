import numpy as np
from sklearn.datasets import make_classification, make_regression
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.metrics import (
    accuracy_score,
    precision_score,
    recall_score,
    f1_score,
    roc_curve,
    auc,
    mean_squared_error,
    mean_absolute_error
)
import matplotlib.pyplot as plt

# --- 分類タスク: 精度、適合率、再現率、F値、ROC曲線、AUC ---
def classification_evaluation():
    print("\n=== 分類モデル評価 ===")

    # データ生成
    X, y = make_classification(
        n_samples=1000, n_features=10, n_classes=2, random_state=42
    )
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

    # ランダムフォレスト分類モデル
    model = RandomForestClassifier(random_state=42)
    model.fit(X_train, y_train)

    # 予測
    y_pred = model.predict(X_test)
    y_pred_proba = model.predict_proba(X_test)[:, 1]

    # モデル評価指標
    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)

    print(f"Accuracy: {accuracy:.2f}")
    print(f"Precision: {precision:.2f}")
    print(f"Recall: {recall:.2f}")
    print(f"F1 Score: {f1:.2f}")

    # ROC曲線とAUC
    fpr, tpr, _ = roc_curve(y_test, y_pred_proba)
    roc_auc = auc(fpr, tpr)

    plt.figure()
    plt.plot(fpr, tpr, color='blue', label=f"ROC curve (AUC = {roc_auc:.2f})")
    plt.plot([0, 1], [0, 1], color='gray', linestyle='--')
    plt.xlabel("False Positive Rate")
    plt.ylabel("True Positive Rate")
    plt.title("ROC Curve")
    plt.legend(loc="lower right")
    plt.grid()
    plt.show()

# --- 回帰タスク: MSEとMAE ---
def regression_evaluation():
    print("\n=== 回帰モデル評価 ===")

    # データ生成
    X, y = make_regression(
        n_samples=1000, n_features=5, noise=0.1, random_state=42
    )
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

    # ランダムフォレスト回帰モデル
    model = RandomForestRegressor(random_state=42)
    model.fit(X_train, y_train)

    # 予測
    y_pred = model.predict(X_test)

    # モデル評価指標
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)

    print(f"Mean Squared Error (MSE): {mse:.2f}")
    print(f"Mean Absolute Error (MAE): {mae:.2f}")

    # 実測値 vs 予測値のプロット
    plt.figure()
    plt.scatter(y_test, y_pred, alpha=0.6, color='blue')
    plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', linestyle='--')
    plt.xlabel("Actual Values")
    plt.ylabel("Predicted Values")
    plt.title("Regression: Actual vs Predicted")
    plt.grid()
    plt.show()

# --- 実行 ---
classification_evaluation()
regression_evaluation()
