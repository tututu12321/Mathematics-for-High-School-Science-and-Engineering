import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.utils import to_categorical

# 1. データのロードと前処理
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# 正規化 (Normalization)
x_train = x_train / 255.0
x_test = x_test / 255.0

# ラベルをone-hotエンコーディング
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

# 2. モデルの構築
model = Sequential([
    Flatten(input_shape=(28, 28)),  # 28x28の画像をフラット化
    Dense(128, activation='relu'),  # 隠れ層
    Dense(10, activation='softmax')  # 出力層 (10カテゴリ)
])

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# 3. モデルの学習
history = model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=10, batch_size=32)

# 4. モデルの評価
y_pred = model.predict(x_test)
y_pred_classes = np.argmax(y_pred, axis=1)
y_true = np.argmax(y_test, axis=1)

# 5. 結果の表示
print("Classification Report:")
print(classification_report(y_true, y_pred_classes))

# 混同行列のプロット
cm = confusion_matrix(y_true, y_pred_classes)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=range(10))
disp.plot(cmap=plt.cm.Blues)
plt.title("Confusion Matrix")
plt.show()

# 6. 学習曲線のプロット
plt.figure(figsize=(12, 5))

# Lossのプロット
plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title("Training vs Validation Loss")
plt.xlabel("Epochs")
plt.ylabel("Loss")
plt.legend()

# Accuracyのプロット
plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title("Training vs Validation Accuracy")
plt.xlabel("Epochs")
plt.ylabel("Accuracy")
plt.legend()

plt.tight_layout()
plt.show()
